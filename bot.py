from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
ADMIN_ID = 528078698  # <-- –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π Telegram ID –æ—Ç @userinfobot
BOT_TOKEN = "7981548528:AAEtJZo2yja4V_ozUhktZsvdbZZVQQoz3d4"  # <-- –¢–æ–∫–µ–Ω –æ—Ç BotFather

# === –ö–ù–û–ü–ö–ò ===
main_menu = ReplyKeyboardMarkup(
    [["üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "üíº –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"], ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]],
    resize_keyboard=True
)

real_estate_menu = ReplyKeyboardMarkup(
    [["üè¢ –ö–≤–∞—Ä—Ç–∏—Ä—ã", "üè° –î–æ–º–∞"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

apartments_menu = ReplyKeyboardMarkup(
    [["üèó –ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏", "üèò –í—Ç–æ—Ä–∏—á–Ω—ã–µ"], ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

# === –°–û–°–¢–û–Ø–ù–ò–Ø ===
ASK_FORM, ASK_NEW, ASK_SECONDARY, ASK_HOUSE = range(4)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –Æ–ª–∏—è, —è –†–∏–µ–ª—Ç–æ—Ä-–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å.\n"
        "–ü–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –∫—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –ú–æ—Å–∫–≤–µ,\n"
        "–∞ —Ç–∞–∫–∂–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –≤ –Ω–∞—à–µ–º –∞–≥–µ–Ω—Ç—Å—Ç–≤–µ üíº",
        reply_markup=main_menu
    )

# === –ê–ù–ö–ï–¢–ê –¢–†–£–î–û–£–°–¢–†–û–ô–°–¢–í–ê ===
async def ask_job_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n\n"
        "1. –§–ò–û:\n"
        "2. –í–æ–∑—Ä–∞—Å—Ç:\n"
        "3. –ï—Å—Ç—å –ª–∏ –æ–ø—ã—Ç –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–¥–∞/–Ω–µ—Ç)?\n"
        "4. –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –ú–æ—Å–∫–≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å?\n"
        "5. –í–∞—à Telegram –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:\n"
    )
    return ASK_FORM

async def receive_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    text = update.message.text
    msg = f"üì• –ê–Ω–∫–µ—Ç–∞ –æ—Ç {user.full_name} (@{user.username or '–±–µ–∑ username'}):\n\n{text}"

    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=msg)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã:", e)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)

    return ConversationHandler.END

# === –ó–ê–Ø–í–ö–ò –ü–û –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò ===
async def receive_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    text = update.message.text
    msg = f"üèó –ó–∞—è–≤–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫—É –æ—Ç {user.full_name} (@{user.username or '–±–µ–∑ username'}):\n{text}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=msg)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu)
    return ConversationHandler.END

async def receive_secondary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    text = update.message.text
    msg = f"üèò –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Ç–æ—Ä–∏—á–∫—É –æ—Ç {user.full_name} (@{user.username or '–±–µ–∑ username'}):\n{text}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=msg)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu)
    return ConversationHandler.END

async def receive_house(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    text = update.message.text
    msg = f"üè° –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–º –æ—Ç {user.full_name} (@{user.username or '–±–µ–∑ username'}):\n{text}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=msg)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu)
    return ConversationHandler.END

# === –ú–ï–ù–Æ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=real_estate_menu)

    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –º–æ–∂–Ω–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: üìû +7 927 220-13-31\n""–∏–ª–∏ –ø–æ –ø–æ—á—Ç–µ: ‚úâÔ∏è Andreeva_YGe@incom.ru"
        )

    elif text == "üè¢ –ö–≤–∞—Ä—Ç–∏—Ä—ã":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã:", reply_markup=apartments_menu)

    elif text == "üèó –ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω –∏ –∂–µ–ª–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç:", reply_markup=None)
        return ASK_NEW

    elif text == "üèò –í—Ç–æ—Ä–∏—á–Ω—ã–µ":
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω –∏ –∂–µ–ª–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç:", reply_markup=None)
        return ASK_SECONDARY

    elif text == "üè° –î–æ–º–∞":
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω –∏ –∂–µ–ª–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç:", reply_markup=None)
        return ASK_HOUSE

    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.")

# === –ó–ê–ü–£–°–ö ===
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))

app.add_handler(ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("üíº –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"), ask_job_form),
        MessageHandler(filters.Regex("üèó –ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏"), handle_message),
        MessageHandler(filters.Regex("üèò –í—Ç–æ—Ä–∏—á–Ω—ã–µ"), handle_message),
        MessageHandler(filters.Regex("üè° –î–æ–º–∞"), handle_message),
    ],
    states={
        ASK_FORM: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_form)],
        ASK_NEW: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_new)],
        ASK_SECONDARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_secondary)],
        ASK_HOUSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_house)],
    },
    fallbacks=[]
))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

app.run_polling()